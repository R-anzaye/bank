{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/ryantrent/Phase 0/bank/src/components/AddTransactionForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\n\nfunction AddTransactionForm() {\n  _s();\n\n  // Initialization of the state component remembering it has to be rendered by importing it first\n  // The statesare specifically for the 4 data inputs that we have\n  const [date, setDate] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n  const [amount, setAmount] = useState(0); // the handle submit function that is rendered to our form\n\n  function handleSubmit(e) {\n    // Prevents default refreshing of the form and loosing the data after data has been placed\n    e.preventDefault(); //What this does is that is removes the data placed in the input holders making it empty as it was initially\n\n    setAmount(\"\");\n    setCategory(\"\");\n    setDescription(\"\");\n    setDate(\"\"); // just like javascript jsx enables us to use fetch function to fetch data from db.json and display it as post\n\n    fetch(\"http://localhost:8001/transactions\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        // This the data we are placing in the body that is date, description,category and amount\n        date,\n        description,\n        category,\n        amount\n      })\n    }).then(response => response.json()).then(data => {\n      console.log(data);\n    });\n  } // Whatever is added is the onsubmit callback function(handleSubmit ) and also the value of every input not forgetting onChange taht basically captures the users input.\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ui segment\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"ui form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inline fields\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          name: \"date\",\n          value: date,\n          onChange: e => setDate(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"description\",\n          placeholder: \"Description\",\n          value: description,\n          onChange: e => setDescription(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"category\",\n          placeholder: \"Category\",\n          value: category,\n          onChange: e => setCategory(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"amount\",\n          placeholder: \"Amount\",\n          step: \"0.01\",\n          value: amount,\n          onChange: e => setAmount(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"ui button\",\n        type: \"submit\",\n        children: \"Add Transaction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddTransactionForm, \"kh4mtr1lhhpH7y8PsnDGPJp6rTg=\");\n\n_c = AddTransactionForm;\nexport default AddTransactionForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddTransactionForm\");","map":{"version":3,"sources":["/home/ryantrent/Phase 0/bank/src/components/AddTransactionForm.js"],"names":["React","useState","AddTransactionForm","date","setDate","description","setDescription","category","setCategory","amount","setAmount","handleSubmit","e","preventDefault","fetch","method","headers","body","JSON","stringify","then","response","json","data","console","log","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\"\n\nfunction AddTransactionForm() {\n  // Initialization of the state component remembering it has to be rendered by importing it first\n // The statesare specifically for the 4 data inputs that we have\n  const [date, setDate] = useState(\"\")\n  const [description, setDescription] = useState(\"\")\n  const [category, setCategory] = useState(\"\")\n  const [amount, setAmount] = useState(0)\n\n  // the handle submit function that is rendered to our form\n  function handleSubmit(e) {\n    // Prevents default refreshing of the form and loosing the data after data has been placed\n    e.preventDefault()\n    //What this does is that is removes the data placed in the input holders making it empty as it was initially\n    setAmount(\"\")\n    setCategory(\"\")\n    setDescription(\"\")\n    setDate(\"\")\n\n// just like javascript jsx enables us to use fetch function to fetch data from db.json and display it as post\n    fetch(\"http://localhost:8001/transactions\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        // This the data we are placing in the body that is date, description,category and amount\n        date,\n        description,\n        category,\n        amount,\n      }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(data)\n      })\n  }\n// Whatever is added is the onsubmit callback function(handleSubmit ) and also the value of every input not forgetting onChange taht basically captures the users input.\n  return (\n    <div className=\"ui segment\">\n      <form className=\"ui form\" onSubmit={handleSubmit}>\n        <div className=\"inline fields\">\n          <input\n            type=\"date\"\n            name=\"date\"\n            value={date}\n            onChange={(e) => setDate(e.target.value)}\n          />\n          <input\n            type=\"text\"\n            name=\"description\"\n            placeholder=\"Description\"\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n          />\n          <input\n            type=\"text\"\n            name=\"category\"\n            placeholder=\"Category\"\n            value={category}\n            onChange={(e) => setCategory(e.target.value)}\n          />\n          <input\n            type=\"number\"\n            name=\"amount\"\n            placeholder=\"Amount\"\n            step=\"0.01\"\n            value={amount}\n            onChange={(e) => setAmount(e.target.value)}\n          />\n        </div>\n        {/* This is the submit button that is rendered with the submit as type */}\n        <button className=\"ui button\" type=\"submit\">\n          Add Transaction\n        </button>\n      </form>\n    </div>\n  )\n}\n\nexport default AddTransactionForm\n\n\n"]},"metadata":{},"sourceType":"module"}